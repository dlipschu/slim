1 2017-08-02 00:00:00
2 2017-08-02 00:00:00
3 2017-08-02 00:00:00
4 2017-08-02 00:00:00
5 2017-08-02 00:00:00
6 2017-08-02 00:00:00
7 2017-08-02 00:00:00
8 2017-08-02 00:00:00
9 2017-08-02 00:00:00
1 2017-08-03 00:00:00
2 2017-08-03 00:00:00
3 2017-08-03 00:00:00
4 2017-08-03 00:00:00
5 2017-08-03 00:00:00
6 2017-08-03 00:00:00
7 2017-08-03 00:00:00
8 2017-08-03 00:00:00
9 2017-08-03 00:00:00
1 2017-08-04 00:00:00
2 2017-08-04 00:00:00
3 2017-08-04 00:00:00
4 2017-08-04 00:00:00
5 2017-08-04 00:00:00
6 2017-08-04 00:00:00
7 2017-08-04 00:00:00
8 2017-08-04 00:00:00
9 2017-08-04 00:00:00
1 2017-08-05 00:00:00
2 2017-08-05 00:00:00
3 2017-08-05 00:00:00
4 2017-08-05 00:00:00
5 2017-08-05 00:00:00
6 2017-08-05 00:00:00
7 2017-08-05 00:00:00
8 2017-08-05 00:00:00
9 2017-08-05 00:00:00
1 2017-08-06 00:00:00
2 2017-08-06 00:00:00
3 2017-08-06 00:00:00
4 2017-08-06 00:00:00
5 2017-08-06 00:00:00
6 2017-08-06 00:00:00
7 2017-08-06 00:00:00
8 2017-08-06 00:00:00
9 2017-08-06 00:00:00
1 2017-08-07 00:00:00
2 2017-08-07 00:00:00
3 2017-08-07 00:00:00
4 2017-08-07 00:00:00
5 2017-08-07 00:00:00
6 2017-08-07 00:00:00
7 2017-08-07 00:00:00
8 2017-08-07 00:00:00
9 2017-08-07 00:00:00
1 2017-08-08 00:00:00
2 2017-08-08 00:00:00
3 2017-08-08 00:00:00
4 2017-08-08 00:00:00
5 2017-08-08 00:00:00
6 2017-08-08 00:00:00
7 2017-08-08 00:00:00
8 2017-08-08 00:00:00
9 2017-08-08 00:00:00
1 2017-08-09 00:00:00
2 2017-08-09 00:00:00
3 2017-08-09 00:00:00
4 2017-08-09 00:00:00
5 2017-08-09 00:00:00
6 2017-08-09 00:00:00
7 2017-08-09 00:00:00
8 2017-08-09 00:00:00
9 2017-08-09 00:00:00
1 2017-08-10 00:00:00
2 2017-08-10 00:00:00
3 2017-08-10 00:00:00
4 2017-08-10 00:00:00
5 2017-08-10 00:00:00
6 2017-08-10 00:00:00
7 2017-08-10 00:00:00
8 2017-08-10 00:00:00
9 2017-08-10 00:00:00
1 2017-08-11 00:00:00
2 2017-08-11 00:00:00
3 2017-08-11 00:00:00
4 2017-08-11 00:00:00
5 2017-08-11 00:00:00
6 2017-08-11 00:00:00
7 2017-08-11 00:00:00
8 2017-08-11 00:00:00
9 2017-08-11 00:00:00
1 2017-08-12 00:00:00
2 2017-08-12 00:00:00
3 2017-08-12 00:00:00
4 2017-08-12 00:00:00
5 2017-08-12 00:00:00
6 2017-08-12 00:00:00
7 2017-08-12 00:00:00
8 2017-08-12 00:00:00
9 2017-08-12 00:00:00
1 2017-08-13 00:00:00
2 2017-08-13 00:00:00
3 2017-08-13 00:00:00
4 2017-08-13 00:00:00
5 2017-08-13 00:00:00
6 2017-08-13 00:00:00
7 2017-08-13 00:00:00
8 2017-08-13 00:00:00
9 2017-08-13 00:00:00
1 2017-08-14 00:00:00
2 2017-08-14 00:00:00
3 2017-08-14 00:00:00
4 2017-08-14 00:00:00
5 2017-08-14 00:00:00
6 2017-08-14 00:00:00
7 2017-08-14 00:00:00
8 2017-08-14 00:00:00
9 2017-08-14 00:00:00
1 2017-08-15 00:00:00
2 2017-08-15 00:00:00
3 2017-08-15 00:00:00
4 2017-08-15 00:00:00
5 2017-08-15 00:00:00
6 2017-08-15 00:00:00
7 2017-08-15 00:00:00
8 2017-08-15 00:00:00
9 2017-08-15 00:00:00
1 2017-08-16 00:00:00
2 2017-08-16 00:00:00
3 2017-08-16 00:00:00
4 2017-08-16 00:00:00
5 2017-08-16 00:00:00
6 2017-08-16 00:00:00
7 2017-08-16 00:00:00
8 2017-08-16 00:00:00
9 2017-08-16 00:00:00
1 2017-08-17 00:00:00
2 2017-08-17 00:00:00
3 2017-08-17 00:00:00
4 2017-08-17 00:00:00
5 2017-08-17 00:00:00
6 2017-08-17 00:00:00
7 2017-08-17 00:00:00
8 2017-08-17 00:00:00
9 2017-08-17 00:00:00
1 2017-08-18 00:00:00
2 2017-08-18 00:00:00
3 2017-08-18 00:00:00
4 2017-08-18 00:00:00
5 2017-08-18 00:00:00
6 2017-08-18 00:00:00
7 2017-08-18 00:00:00
8 2017-08-18 00:00:00
9 2017-08-18 00:00:00
1 2017-08-19 00:00:00
2 2017-08-19 00:00:00
3 2017-08-19 00:00:00
4 2017-08-19 00:00:00
5 2017-08-19 00:00:00
6 2017-08-19 00:00:00
7 2017-08-19 00:00:00
8 2017-08-19 00:00:00
9 2017-08-19 00:00:00
1 2017-08-20 00:00:00
2 2017-08-20 00:00:00
3 2017-08-20 00:00:00
4 2017-08-20 00:00:00
5 2017-08-20 00:00:00
6 2017-08-20 00:00:00
7 2017-08-20 00:00:00
8 2017-08-20 00:00:00
9 2017-08-20 00:00:00
1 2017-08-21 00:00:00
2 2017-08-21 00:00:00
3 2017-08-21 00:00:00
4 2017-08-21 00:00:00
5 2017-08-21 00:00:00
6 2017-08-21 00:00:00
7 2017-08-21 00:00:00
8 2017-08-21 00:00:00
9 2017-08-21 00:00:00
1 2017-08-22 00:00:00
2 2017-08-22 00:00:00
3 2017-08-22 00:00:00
4 2017-08-22 00:00:00
5 2017-08-22 00:00:00
6 2017-08-22 00:00:00
7 2017-08-22 00:00:00
8 2017-08-22 00:00:00
9 2017-08-22 00:00:00
1 2017-08-23 00:00:00
2 2017-08-23 00:00:00
3 2017-08-23 00:00:00
4 2017-08-23 00:00:00
5 2017-08-23 00:00:00
6 2017-08-23 00:00:00
7 2017-08-23 00:00:00
8 2017-08-23 00:00:00
9 2017-08-23 00:00:00
1 2017-08-24 00:00:00
2 2017-08-24 00:00:00
3 2017-08-24 00:00:00
4 2017-08-24 00:00:00
5 2017-08-24 00:00:00
6 2017-08-24 00:00:00
7 2017-08-24 00:00:00
8 2017-08-24 00:00:00
9 2017-08-24 00:00:00
1 2017-08-25 00:00:00
2 2017-08-25 00:00:00
3 2017-08-25 00:00:00
4 2017-08-25 00:00:00
5 2017-08-25 00:00:00
6 2017-08-25 00:00:00
7 2017-08-25 00:00:00
8 2017-08-25 00:00:00
9 2017-08-25 00:00:00
1 2017-08-26 00:00:00
2 2017-08-26 00:00:00
3 2017-08-26 00:00:00
4 2017-08-26 00:00:00
5 2017-08-26 00:00:00
6 2017-08-26 00:00:00
7 2017-08-26 00:00:00
8 2017-08-26 00:00:00
9 2017-08-26 00:00:00
1 2017-08-27 00:00:00
2 2017-08-27 00:00:00
3 2017-08-27 00:00:00
4 2017-08-27 00:00:00
5 2017-08-27 00:00:00
6 2017-08-27 00:00:00
7 2017-08-27 00:00:00
8 2017-08-27 00:00:00
9 2017-08-27 00:00:00
1 2017-08-28 00:00:00
2 2017-08-28 00:00:00
3 2017-08-28 00:00:00
4 2017-08-28 00:00:00
5 2017-08-28 00:00:00
6 2017-08-28 00:00:00
7 2017-08-28 00:00:00
8 2017-08-28 00:00:00
9 2017-08-28 00:00:00
1 2017-08-29 00:00:00
2 2017-08-29 00:00:00
3 2017-08-29 00:00:00
4 2017-08-29 00:00:00
5 2017-08-29 00:00:00
6 2017-08-29 00:00:00
7 2017-08-29 00:00:00
8 2017-08-29 00:00:00
9 2017-08-29 00:00:00
1 2017-08-30 00:00:00
2 2017-08-30 00:00:00
3 2017-08-30 00:00:00
4 2017-08-30 00:00:00
5 2017-08-30 00:00:00
6 2017-08-30 00:00:00
7 2017-08-30 00:00:00
8 2017-08-30 00:00:00
9 2017-08-30 00:00:00
1 2017-08-31 00:00:00
2 2017-08-31 00:00:00
3 2017-08-31 00:00:00
4 2017-08-31 00:00:00
5 2017-08-31 00:00:00
6 2017-08-31 00:00:00
7 2017-08-31 00:00:00
8 2017-08-31 00:00:00
9 2017-08-31 00:00:00
1 2017-09-01 00:00:00
2 2017-09-01 00:00:00
3 2017-09-01 00:00:00
4 2017-09-01 00:00:00
5 2017-09-01 00:00:00
6 2017-09-01 00:00:00
7 2017-09-01 00:00:00
8 2017-09-01 00:00:00
9 2017-09-01 00:00:00
1 2017-09-02 00:00:00
2 2017-09-02 00:00:00
3 2017-09-02 00:00:00
4 2017-09-02 00:00:00
5 2017-09-02 00:00:00
6 2017-09-02 00:00:00
7 2017-09-02 00:00:00
8 2017-09-02 00:00:00
9 2017-09-02 00:00:00
1 2017-09-03 00:00:00
2 2017-09-03 00:00:00
3 2017-09-03 00:00:00
4 2017-09-03 00:00:00
5 2017-09-03 00:00:00
6 2017-09-03 00:00:00
7 2017-09-03 00:00:00
8 2017-09-03 00:00:00
9 2017-09-03 00:00:00
1 2017-09-04 00:00:00
2 2017-09-04 00:00:00
3 2017-09-04 00:00:00
4 2017-09-04 00:00:00
5 2017-09-04 00:00:00
6 2017-09-04 00:00:00
7 2017-09-04 00:00:00
8 2017-09-04 00:00:00
9 2017-09-04 00:00:00
2017-09-05 00:00:00 2104 nan
1 2017-09-05 00:00:00
2 2017-09-05 00:00:00
3 2017-09-05 00:00:00
4 2017-09-05 00:00:00
5 2017-09-05 00:00:00
6 2017-09-05 00:00:00
7 2017-09-05 00:00:00
8 2017-09-05 00:00:00
9 2017-09-05 00:00:00
1 2017-09-06 00:00:00
2 2017-09-06 00:00:00
3 2017-09-06 00:00:00
4 2017-09-06 00:00:00
5 2017-09-06 00:00:00
6 2017-09-06 00:00:00
7 2017-09-06 00:00:00
8 2017-09-06 00:00:00
9 2017-09-06 00:00:00
1 2017-09-07 00:00:00
2 2017-09-07 00:00:00
3 2017-09-07 00:00:00
4 2017-09-07 00:00:00
5 2017-09-07 00:00:00
6 2017-09-07 00:00:00
7 2017-09-07 00:00:00
8 2017-09-07 00:00:00
9 2017-09-07 00:00:00
1 2017-09-08 00:00:00
2 2017-09-08 00:00:00
3 2017-09-08 00:00:00
4 2017-09-08 00:00:00
5 2017-09-08 00:00:00
6 2017-09-08 00:00:00
7 2017-09-08 00:00:00
8 2017-09-08 00:00:00
9 2017-09-08 00:00:00
Filename: ./model/memdrain_slm.py

Line #    Mem usage    Increment   Line Contents
================================================
    62   81.719 MiB    0.000 MiB   @profile
    63                             def func1():
    64                             
    65   81.719 MiB    0.000 MiB       v_path = sys.argv[2]
    66   81.719 MiB    0.000 MiB       file_path = "./outputs" + v_path
    67                             
    68   81.719 MiB    0.000 MiB       sys.path.append(file_path)
    69                             
    70   81.719 MiB    0.000 MiB       file_in = sys.argv[1]
    71   82.641 MiB    0.922 MiB       inpt=__import__(file_in, globals(), locals(), ['*'])
    72                             
    73   82.641 MiB    0.000 MiB       v_file = str(sys.argv[3])
    74                             
    75                                 #np.random.seed(545836870)
    76                             
    77                                 #Functions-------------------------------------------------------------------------------------
    78                             
    79                                 #Update resistance distribution and sample from it 
    80  535.180 MiB  452.539 MiB       def resistEMB(prp_ext, frms_muEMB, res_muEMB, length=1): 
    81  535.180 MiB    0.000 MiB           EMB_out = []
    82  535.180 MiB    0.000 MiB           est_muEMB = prp_ext*(inpt.prop_influx*inpt.f_muEMB + (1-inpt.prop_influx)*res_muEMB) + (1-prp_ext)*frms_muEMB
    83  535.180 MiB    0.000 MiB           for i in range(length):
    84  535.180 MiB    0.000 MiB               EMB_out.extend([np.random.normal(est_muEMB, inpt.f_sigEMB)])
    85  535.180 MiB    0.000 MiB           return EMB_out
    86                                                                
    87                                 #Fish background mortality rate, decreasing as in Soares et al 2011                           
    88  535.180 MiB    0.000 MiB       def fb_mort(jours):
    89  535.180 MiB    0.000 MiB           return 0.00057#(1000 + (jours - 700)**2)/490000000 
    90                             
    91                                 #prob of developping after D days in a stage as given by Aldrin et al 2017
    92  535.180 MiB    0.000 MiB       def devTimeAldrin(del_p, del_m10, del_s, temp_c, D):   
    93  535.180 MiB    0.000 MiB           unbounded = log(2)*del_s*D**(del_s-1)*(del_m10*10**del_p/temp_c**del_p)**(-del_s)
    94  535.180 MiB    0.000 MiB           unbounded[unbounded==0] = 10**(-30)
    95  535.180 MiB    0.000 MiB           unbounded[unbounded>1] = 1
    96  535.180 MiB    0.000 MiB           return unbounded.astype('float64')
    97                             
    98                                 #average dev days using devTimeAldrin, not used in model but handy to have
    99                                 #5deg: 5.2,-,67.5,2
   100                                 #10deg: 3.9,-,24,5.3
   101                                 #15deg: 3.3,-,13.1,9.4
   102   82.641 MiB -452.539 MiB       def aveDevDays(del_p, del_m10, del_s, temp_c):
   103                                     return 100*devTimeAldrin(del_p, del_m10, del_s, temp_c, 100)\
   104                                     -0.001*sum([devTimeAldrin(del_p, del_m10, del_s, temp_c, i) 
   105                                     for i in np.arange(0,100.001,0.001)])
   106                                     
   107   82.641 MiB    0.000 MiB       def eudist(pointA,pointB):
   108                                     return sqrt((pointA[0]-pointB[0])**2 + (pointA[1]-pointB[1])**2)
   109                             
   110                             
   111                                 #----------------------------------------------------------------------------------------------
   112                                 #----------------------------------------------------------------------------------------------
   113                             
   114                             
   115                                 #Input Data------------------------------------------------------------------------------------
   116   82.641 MiB    0.000 MiB       EMBmort = 0.9
   117                             
   118   82.641 MiB    0.000 MiB       hrs_travel = inpt.E_days
   119   82.641 MiB    0.000 MiB       prop_arrive = inpt.prob_arrive
   120                             
   121                             
   122   82.641 MiB    0.000 MiB       mort_rates = np.array([0.17, 0.22, 0.008, 0.05, 0.02, 0.06]) # L1,L2,L3,L4,L5f,L5m
   123   82.641 MiB    0.000 MiB       eggs = inpt.eggs
   124   82.641 MiB    0.000 MiB       d_hatching = inpt.d_hatching #8#[9,10,11,9,8,6,4,4,4,4,5,7]            
   125                             
   126   82.641 MiB    0.000 MiB       tau = 1 ###############################################
   127                             
   128                                 #Initial Values--------------------------------------------------------------------------------
   129   82.641 MiB    0.000 MiB       cur_date = inpt.start_date
   130                             
   131   82.641 MiB    0.000 MiB       fcID = ['f'+str(i)+'c'+str(j) for i in range(1,inpt.nfarms+1) for j in range(1,inpt.ncages[i-1]+1)]
   132  193.578 MiB  110.938 MiB       fsh = [list(range(1,inpt.fishf[i]+1)) for i in range(inpt.nfarms) for j in range(inpt.ncages[i])]
   133  193.578 MiB    0.000 MiB       all_fish = dict(zip(fcID,fsh))
   134                                     
   135                                 #Lice population in farms
   136  193.922 MiB    0.344 MiB       df_list = [pd.DataFrame(columns=['Farm','Cage','Fish','MF','stage','stage_age','avail',\
   137                                                              'mate_resistanceT1','resistanceT1','date','arrival','nmates']) \
   138  193.922 MiB    0.000 MiB                                     for i in range(inpt.nfarms) for j in range(inpt.ncages[i])]
   139  193.922 MiB    0.000 MiB       offspring = pd.DataFrame(columns=df_list[0].columns)
   140                             
   141  193.922 MiB    0.000 MiB       lifemates = []
   142  193.922 MiB    0.000 MiB       offs_len = 0
   143  193.922 MiB    0.000 MiB       prevOffs_len = 0
   144  193.922 MiB    0.000 MiB       env_sigEMB = 1.0
   145  193.922 MiB    0.000 MiB       farms_muEMB = [inpt.f_muEMB]*inpt.nfarms
   146  193.922 MiB    0.000 MiB       farms_sigEMB = [inpt.f_sigEMB]*inpt.nfarms
   147  193.922 MiB    0.000 MiB       prev_muEMB = farms_muEMB.copy()
   148  193.922 MiB    0.000 MiB       prev_sigEMB = farms_sigEMB.copy()
   149  193.922 MiB    0.000 MiB       res_muEMB = inpt.f_muEMB
   150  193.922 MiB    0.000 MiB       pres_muEMB = inpt.f_muEMB
   151  193.922 MiB    0.000 MiB       prop_ext = 1
   152  193.922 MiB    0.000 MiB       plankt_resist = []
   153                                 #----------------------------------------------------------------------------------------------
   154                                 #----------------------------------------------------------------------------------------------
   155                                 #--------------------------Simulation----------------------------------------------------------
   156                                 #----------------------------------------------------------------------------------------------
   157                                 #----------------------------------------------------------------------------------------------
   158  193.922 MiB    0.000 MiB       directory = os.path.dirname(file_path)
   159  193.922 MiB    0.000 MiB       try:
   160  193.922 MiB    0.000 MiB           if not os.path.exists(directory):
   161                                         os.makedirs(directory)
   162                                 except OSError:
   163                                     print('Error creating directory')
   164  193.922 MiB    0.000 MiB       file1 = open(file_path + 'lice_counts' + v_file + '.txt','a+')
   165  193.922 MiB    0.000 MiB       file2 = open(file_path + 'resistanceBVs' + v_file + '.csv','a+') 
   166  193.922 MiB    0.000 MiB       print('farm', 'cur_date', 'muEMB', 'sigEMB', 'prop_ext', file=file2, sep=',', flush=True)
   167                                 #prev_time = time.time() 
   168                                 #prev_femaleAL = [0]*(inpt.nfarms-1)
   169  193.973 MiB    0.051 MiB       delta_treat = [0]*(inpt.nfarms)
   170  533.254 MiB  339.281 MiB       while cur_date <= inpt.end_date: 
   171                                     
   172  498.105 MiB  -35.148 MiB           cur_date = cur_date + dt.timedelta(days=tau)
   173  498.105 MiB    0.000 MiB           t = (cur_date - inpt.start_date).days
   174                                     
   175                                     # if (t%7)==0:
   176                                         # print((time.time()-prev_time)/60, ' date ' + str(cur_date), file=file, flush=True)
   177                                         # prev_time = time.time()
   178                                         
   179                                           
   180                                     #add new offspring to cages
   181  498.105 MiB    0.000 MiB           offs_len = offs_len + len(offspring.index)
   182  498.105 MiB    0.000 MiB           k = -1
   183  503.977 MiB    5.871 MiB           for f in range(1,inpt.nfarms+1):
   184  503.977 MiB    0.000 MiB               for c in range(1,inpt.ncages[f-1]+1):
   185  503.977 MiB    0.000 MiB                   k = k + 1
   186  503.977 MiB    0.000 MiB                   if len(offspring.index)>0:
   187  503.977 MiB    0.000 MiB                       df_list[k] = df_list[k].append(offspring[(offspring['Farm']==f) & (offspring['Cage']==c)].copy(), ignore_index=True)
   188                                                 #offspring = offspring.drop(offspring[(offspring['Farm']==f) & (offspring['Cage']==c)].index)
   189  498.105 MiB   -5.871 MiB           offspring = pd.DataFrame(columns=df_list[0].columns)
   190                             
   191  498.105 MiB    0.000 MiB           if (t%35)==0:
   192  466.367 MiB  -31.738 MiB               res_muEMB = pres_muEMB
   193  466.367 MiB    0.000 MiB               pres_muEMB = np.mean(plankt_resist)
   194  466.367 MiB    0.000 MiB               plankt_resist = []
   195  466.367 MiB    0.000 MiB               prop_ext = (sum(inpt.ncages)*eval(inpt.ext_pressure))/(sum(inpt.ncages)*eval(inpt.ext_pressure) + offs_len/35)
   196  466.367 MiB    0.000 MiB               prevOffs_len = offs_len/35
   197  466.367 MiB    0.000 MiB               offs_len = 0        
   198  466.367 MiB    0.000 MiB               if len(lifemates)>0:
   199  466.371 MiB    0.004 MiB                   print(cur_date, len(lifemates), np.nanmean(lifemates),flush=True)
   200  466.371 MiB    0.000 MiB                   lifemates=[]
   201                                             
   202                                     #------------------------------------------------------------------------------------------
   203                                     #Events during tau in cage-----------------------------------------------------------------
   204                                     #------------------------------------------------------------------------------------------
   205  498.105 MiB   31.734 MiB           fc = -1
   206  533.254 MiB   35.148 MiB           for farm in range(1, inpt.nfarms+1):
   207  527.238 MiB   -6.016 MiB               if cur_date.day==1:
   208  433.121 MiB  -94.117 MiB                   femaleAL = np.array([],dtype=float)
   209                                         
   210                                         #Estimate distribution params for external pressure that originated from farms
   211  527.238 MiB   94.117 MiB               if ((t%35)==0) & (cur_date >= inpt.farm_start[farm-1] + dt.timedelta(days=35)):
   212  474.648 MiB  -52.590 MiB                   farms_muEMB[farm-1] = prev_muEMB[farm-1]
   213  474.648 MiB    0.000 MiB                   farms_sigEMB[farm-1] = prev_sigEMB[farm-1]
   214  474.648 MiB    0.000 MiB                   resistanceT1 = []
   215  474.648 MiB    0.000 MiB                   if farm==1:
   216  466.914 MiB   -7.734 MiB                       for i in range(inpt.ncages[farm-1]):
   217  466.914 MiB    0.000 MiB                           resistanceT1.extend(df_list[i].resistanceT1)
   218                                             else:
   219  474.648 MiB    7.734 MiB                       for i in range(sum(inpt.ncages[0:farm-1]),sum(inpt.ncages[0:farm])):
   220  474.648 MiB    0.000 MiB                           resistanceT1.extend(df_list[i].resistanceT1)
   221  474.648 MiB    0.000 MiB                   prev_muEMB[farm-1] = np.nanmean(resistanceT1)
   222  474.648 MiB    0.000 MiB                   prev_sigEMB[farm-1] = np.nanstd(resistanceT1)
   223  474.648 MiB    0.000 MiB                   print(farm, cur_date, prev_muEMB[farm-1], prev_sigEMB[farm-1], prop_ext, file=file2, sep=',', flush=True)
   224                                         
   225  535.180 MiB   60.531 MiB               for cage in range(1, inpt.ncages[farm-1]+1):
   226  535.180 MiB    0.000 MiB                   fc = fc + 1
   227                                             
   228  535.180 MiB    0.000 MiB                   NSbool = eval(inpt.NSbool_str)
   229  535.180 MiB    0.000 MiB                   if NSbool==True: 
   230                                                 
   231  535.180 MiB    0.000 MiB                       if cur_date.day==1:
   232  433.629 MiB -101.551 MiB                           femaleAL = np.append(femaleAL, sum((df_list[fc].stage==5)/len(all_fish['f'+str(farm)+'c'+str(cage)])))
   233                                                 
   234  535.180 MiB  101.551 MiB                       temp_now = inpt.temp_f(cur_date.month, inpt.xy_array[farm-1][1])   
   235                                                                            
   236  535.180 MiB    0.000 MiB                       if not df_list[fc].empty:
   237  535.180 MiB    0.000 MiB                           df_list[fc].date = cur_date
   238  535.180 MiB    0.000 MiB                           df_list[fc].stage_age = df_list[fc].stage_age + tau
   239  535.180 MiB    0.000 MiB                           df_list[fc].arrival = df_list[fc].arrival - tau
   240  535.180 MiB    0.000 MiB                           df_list[fc].loc[df_list[fc].avail>0, 'avail'] = df_list[fc].loc[df_list[fc].avail>0, 'avail'] + tau
   241  535.180 MiB    0.000 MiB                           df_list[fc].loc[(df_list[fc].MF=='M') & (df_list[fc].avail>4), 'avail'] = 0
   242  535.180 MiB    0.000 MiB                           df_list[fc].loc[(df_list[fc].MF=='F') & (df_list[fc].avail>d_hatching(temp_now)), 'avail'] = 0
   243  535.180 MiB    0.000 MiB                           df_list[fc].loc[(df_list[fc].MF=='F') & (df_list[fc].avail>d_hatching(temp_now)), 'mate_resistanceT1'] = None
   244                                                     
   245                                                 #new planktonic stages arriving from wildlife reservoir
   246  535.180 MiB    0.000 MiB                       nplankt = eval(inpt.ext_pressure)*tau
   247  535.180 MiB    0.000 MiB                       plankt_cage = pd.DataFrame(columns=df_list[fc].columns)
   248  535.180 MiB    0.000 MiB                       plankt_cage['MF'] = np.random.choice(['F','M'],nplankt)
   249  535.180 MiB    0.000 MiB                       plankt_cage['stage'] = 2 
   250  535.180 MiB    0.000 MiB                       plankt_cage['Farm'] = farm
   251  535.180 MiB    0.000 MiB                       plankt_cage['Cage'] = cage
   252  535.180 MiB    0.000 MiB                       p=stats.poisson.pmf(range(15),3)
   253  535.180 MiB    0.000 MiB                       p = p/np.sum(p) #probs need to add up to one 
   254  535.180 MiB    0.000 MiB                       plankt_cage['stage_age'] = np.random.choice(range(15),nplankt,p=p)
   255  535.180 MiB    0.000 MiB                       plankt_cage['avail'] = 0
   256  535.180 MiB    0.000 MiB                       plankt_cage['resistanceT1'] = resistEMB(prop_ext, farms_muEMB[farm-1], res_muEMB, nplankt)
   257  535.180 MiB    0.000 MiB                       plankt_cage['date'] = cur_date
   258  535.180 MiB    0.000 MiB                       plankt_cage['avail'] = 0
   259  535.180 MiB    0.000 MiB                       plankt_cage['arrival'] = 0
   260                                                 
   261  535.180 MiB    0.000 MiB                       if ((t+1)%35)==0:
   262  466.305 MiB  -68.875 MiB                           plankt_resist.extend(plankt_cage.resistanceT1)
   263                                                            
   264  535.180 MiB   68.875 MiB                       df_list[fc] = df_list[fc].append(plankt_cage, ignore_index=True)
   265  535.180 MiB    0.000 MiB                       del plankt_cage
   266  535.180 MiB    0.000 MiB                       dead_fish = set([])
   267                                                 
   268                                                 #Background mortality events-------------------------------------------------------
   269  535.180 MiB    0.000 MiB                       inds_stage = np.array([sum(df_list[fc]['stage']==i) for i in range(1,7)])
   270  535.180 MiB    0.000 MiB                       Emort = np.multiply(mort_rates, inds_stage)
   271  535.180 MiB    0.000 MiB                       mort_ents = np.random.poisson(Emort)
   272  535.180 MiB    0.000 MiB                       mort_ents=[min(mort_ents[i],inds_stage[i]) for i in range(len(mort_ents))]
   273  535.180 MiB    0.000 MiB                       mort_inds = []
   274  535.180 MiB    0.000 MiB                       for i in range(1,7):
   275  535.180 MiB    0.000 MiB                           df = df_list[fc].loc[df_list[fc].stage==i].copy()
   276  535.180 MiB    0.000 MiB                           if not df.empty:
   277  535.180 MiB    0.000 MiB                               if np.sum(df.stage_age)>0:
   278  535.180 MiB    0.000 MiB                                   p = (df.stage_age+1)/np.sum(df.stage_age+1)
   279  535.180 MiB    0.000 MiB                                   p = pd.to_numeric(p)
   280  535.180 MiB    0.000 MiB                                   values = np.random.choice(df.index, mort_ents[i-1], p=p, replace=False).tolist()
   281                                                         else:
   282                                                             values = np.random.choice(df.index, mort_ents[i-1], replace=False).tolist()                    
   283  535.180 MiB    0.000 MiB                               mort_inds.extend(values)
   284  535.180 MiB    0.000 MiB                               if i==5:
   285  535.180 MiB    0.000 MiB                                   lifemates.extend(df.nmates[values])
   286  535.180 MiB    0.000 MiB                           del df
   287                                                         
   288                                                 #Treatment mortality events------------------------------------------------------
   289  535.180 MiB    0.000 MiB                       EMBsus = [1 if df_list[fc].stage[i]>2 else 0 for i in range(len(df_list[fc].index))]
   290  535.180 MiB    0.000 MiB                       if eval(inpt.bool_treat):
   291  535.180 MiB    0.000 MiB                           if cage==1:
   292  527.238 MiB   -7.941 MiB                               print(farm, cur_date, flush=True)
   293  535.180 MiB    7.941 MiB                           phenoEMB = df_list[fc].resistanceT1 + np.random.normal(0,env_sigEMB,len(df_list[fc].resistanceT1)) #add environmental deviation
   294  535.180 MiB    0.000 MiB                           phenoEMB = 1/(1 + np.exp(phenoEMB))  #1-resistance
   295  535.180 MiB    0.000 MiB                           phenoEMB =  phenoEMB*EMBsus #remove stages that aren't susceptible to EMB
   296  535.180 MiB    0.000 MiB                           ETmort = sum(phenoEMB)*EMBmort 
   297  535.180 MiB    0.000 MiB                           if ETmort>0:
   298  535.180 MiB    0.000 MiB                               Tmort_ents = np.random.poisson(ETmort)
   299  535.180 MiB    0.000 MiB                               Tmort_ents = min(Tmort_ents,len(df_list[fc].resistanceT1))
   300  535.180 MiB    0.000 MiB                               p = (phenoEMB)/np.sum(phenoEMB)
   301  535.180 MiB    0.000 MiB                               mort_inds.extend(np.random.choice(df_list[fc].index, Tmort_ents, p=p, replace=False).tolist())
   302  535.180 MiB    0.000 MiB                               mort_inds = list(set(mort_inds))
   303                             
   304                                                 #Development events----------------------------------------------------------------
   305                                                 
   306  535.180 MiB    0.000 MiB                       if inds_stage[0]>0:
   307  535.180 MiB    0.000 MiB                           L1toL2 = devTimeAldrin(0.401,8.814,18.869,temp_now, df_list[fc].loc[df_list[fc].stage==1,'stage_age'].values)
   308  535.180 MiB    0.000 MiB                           L1toL2_ents = np.random.poisson(sum(L1toL2))
   309  535.180 MiB    0.000 MiB                           L1toL2_ents = min(L1toL2_ents, inds_stage[0])
   310  535.180 MiB    0.000 MiB                           L1toL2_inds = np.random.choice(df_list[fc].loc[df_list[fc].stage==1].index, \
   311  535.180 MiB    0.000 MiB                                                          L1toL2_ents, p=L1toL2/np.sum(L1toL2), replace=False)
   312                                                 else:
   313  295.637 MiB -239.543 MiB                           L1toL2_inds = []
   314                                                                         
   315  535.180 MiB  239.543 MiB                       if inds_stage[2]>0:
   316  535.180 MiB    0.000 MiB                           L3toL4 = devTimeAldrin(1.305,18.934,7.945,temp_now,df_list[fc].loc[df_list[fc].stage==3,'stage_age'].values) 
   317  535.180 MiB    0.000 MiB                           L3toL4_ents = np.random.poisson(sum(L3toL4))
   318  535.180 MiB    0.000 MiB                           L3toL4_ents = min(L3toL4_ents, inds_stage[2])
   319  535.180 MiB    0.000 MiB                           L3toL4_inds = np.random.choice(df_list[fc].loc[df_list[fc]['stage']==3].index, \
   320  535.180 MiB    0.000 MiB                                                          L3toL4_ents, p=L3toL4/np.sum(L3toL4), replace=False)
   321                                                 else:
   322  218.262 MiB -316.918 MiB                           L3toL4_inds = []
   323                                                 
   324  535.180 MiB  316.918 MiB                       if inds_stage[3]>0:
   325  535.180 MiB    0.000 MiB                           L4toL5 = devTimeAldrin(0.866,10.742,1.643,temp_now,df_list[fc].loc[df_list[fc].stage==4,'stage_age'].values)
   326  535.180 MiB    0.000 MiB                           L4toL5_ents = np.random.poisson(sum(L4toL5))
   327  535.180 MiB    0.000 MiB                           L4toL5_ents = min(L4toL5_ents, inds_stage[3])
   328  535.180 MiB    0.000 MiB                           L4toL5_inds = np.random.choice(df_list[fc].loc[df_list[fc]['stage']==4].index, \
   329  535.180 MiB    0.000 MiB                                                          L4toL5_ents, p=L4toL5/np.sum(L4toL5), replace=False)
   330                                                 else:
   331  275.000 MiB -260.180 MiB                           L4toL5_inds = []
   332                                                 
   333                                                 #Fish growth and death-------------------------------------------------------------
   334  535.180 MiB  260.180 MiB                       wt = 10000/(1+exp(-0.01*(t-475)))
   335  535.180 MiB    0.000 MiB                       fish_fc = np.array(df_list[fc][df_list[fc].stage>3].Fish.unique().tolist()) #fish with lice
   336  535.180 MiB    0.000 MiB                       fish_fc = fish_fc[~np.isnan(fish_fc)]
   337  535.180 MiB    0.000 MiB                       adlicepg = np.array(df_list[fc][df_list[fc].stage>3].groupby('Fish').stage.count())/wt
   338  535.180 MiB    0.000 MiB                       Plideath = 1/(1+np.exp(-19*(adlicepg-0.63)))
   339  535.180 MiB    0.000 MiB                       nfish = len(all_fish['f'+str(farm)+'c'+str(cage)])
   340  535.180 MiB    0.000 MiB                       Ebf_death = fb_mort(t)*tau*(nfish)
   341  535.180 MiB    0.000 MiB                       Elf_death = np.sum(Plideath)*tau
   342  535.180 MiB    0.000 MiB                       bfd_ents = np.random.poisson(Ebf_death)
   343  535.180 MiB    0.000 MiB                       lfd_ents = np.random.poisson(Elf_death) 
   344                                                            
   345  535.180 MiB    0.000 MiB                       if fish_fc.size>0:
   346  535.180 MiB    0.000 MiB                           dead_fish.update(np.random.choice(fish_fc, 
   347  535.180 MiB    0.000 MiB                                     lfd_ents, p=Plideath/np.sum(Plideath), replace=False).tolist())
   348  535.180 MiB    0.000 MiB                       if len(dead_fish)>0:
   349  527.238 MiB   -7.941 MiB                           all_fish['f'+str(farm)+'c'+str(cage)] = [i for i in all_fish['f'+str(farm)+'c'+str(cage)] if i not in dead_fish]
   350  535.180 MiB    7.941 MiB                       dead_fish.update(np.random.choice(all_fish['f'+str(farm)+'c'+str(cage)], bfd_ents, replace=False).tolist())
   351  535.180 MiB    0.000 MiB                       if len(dead_fish)>0:
   352  535.180 MiB    0.000 MiB                           all_fish['f'+str(farm)+'c'+str(cage)] = [i for i in all_fish['f'+str(farm)+'c'+str(cage)] if i not in dead_fish]
   353                                                 
   354                                                 #Infection events------------------------------------------------------------------
   355  535.180 MiB    0.000 MiB                       cop_cage = sum((df_list[fc].stage==2) & (df_list[fc].arrival<=df_list[fc].stage_age))
   356  535.180 MiB    0.000 MiB                       if cop_cage>0:
   357  535.180 MiB    0.000 MiB                           eta_aldrin = -2.576 + log(nfish) + 0.082*(log(wt)-0.55)
   358  535.180 MiB    0.000 MiB                           Einf = (exp(eta_aldrin)/(1+exp(eta_aldrin)))*tau*cop_cage
   359  535.180 MiB    0.000 MiB                           inf_ents = np.random.poisson(Einf)
   360  535.180 MiB    0.000 MiB                           inf_ents = min(inf_ents,cop_cage)
   361  535.180 MiB    0.000 MiB                           inf_inds = np.random.choice(df_list[fc].loc[(df_list[fc].stage==2) & (df_list[fc].arrival<=df_list[fc].stage_age)].index, inf_ents, replace=False)
   362                                                 else:
   363                                                     inf_inds = []
   364                                                 
   365                                                 #Mating events---------------------------------------------------------------------
   366                                                 
   367                                                 #who is mating               
   368  535.180 MiB    0.000 MiB                       females = df_list[fc].loc[(df_list[fc].stage==5) & (df_list[fc].avail==0)].index
   369  535.180 MiB    0.000 MiB                       males = df_list[fc].loc[(df_list[fc].stage==6) & (df_list[fc].avail==0)].index
   370  535.180 MiB    0.000 MiB                       nmating = min(sum(df_list[fc].index.isin(females)),\
   371  535.180 MiB    0.000 MiB                                 sum(df_list[fc].index.isin(males)))
   372  535.180 MiB    0.000 MiB                       nmating = nmating - np.random.poisson(2)
   373  535.180 MiB    0.000 MiB                       if nmating>0:
   374  535.180 MiB    0.000 MiB                           sires = np.random.choice(males, nmating, replace=False)
   375  535.180 MiB    0.000 MiB                           p_dams = 1 - (df_list[fc].loc[df_list[fc].index.isin(females),'stage_age']**2/
   376  535.180 MiB    0.000 MiB                                       (np.sum(df_list[fc].loc[df_list[fc].index.isin(females),'stage_age']**2)+1))
   377  535.180 MiB    0.000 MiB                           dams = np.random.choice(females, nmating, p=np.array(p_dams/np.sum(p_dams)).tolist(), replace=False)
   378                                                 else:
   379  318.258 MiB -216.922 MiB                           sires = []
   380  318.258 MiB    0.000 MiB                           dams = []
   381  535.180 MiB  216.922 MiB                       df_list[fc].loc[df_list[fc].index.isin(dams),'avail'] = 1
   382  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(sires),'avail'] = 1
   383  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(dams),'nmates'] = df_list[fc].loc[df_list[fc].index.isin(dams),'nmates'].values + 1
   384  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(sires),'nmates'] = df_list[fc].loc[df_list[fc].index.isin(sires),'nmates'].values + 1                
   385                                                 #Add genotype of sire to dam info
   386                                                 df_list[fc].loc[df_list[fc].index.isin(dams),'mate_resistanceT1'] = \
   387  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(sires),'resistanceT1'].values
   388                                                 
   389                             
   390                                                 #create offspring
   391  535.180 MiB    0.000 MiB                       bv_lst = []
   392  535.180 MiB    0.000 MiB                       eggs_now = int(round(eggs*tau/d_hatching(temp_now)))                
   393  535.180 MiB    0.000 MiB                       for i in dams:
   394                                                     underlying = 0.5*df_list[fc].resistanceT1[i]\
   395  535.180 MiB    0.000 MiB                                      + 0.5*df_list[fc].mate_resistanceT1[i]+ \
   396  535.180 MiB    0.000 MiB                                      np.random.normal(0, farms_sigEMB[farm-1], eggs_now+250)/np.sqrt(2)
   397  535.180 MiB    0.000 MiB                           bv_lst.extend(underlying)  
   398  535.180 MiB    0.000 MiB                       new_offs = len(dams)*eggs_now
   399  535.180 MiB    0.000 MiB                       num = 0
   400  535.180 MiB    0.000 MiB                       offs_lst = [offspring]
   401  535.180 MiB    0.000 MiB                       for f in range(1,inpt.nfarms+1):
   402  535.180 MiB    0.000 MiB                           arrivals = np.random.poisson(prop_arrive[f-1][farm-1]*new_offs)
   403  535.180 MiB    0.000 MiB                           if arrivals>0:
   404  535.180 MiB    0.000 MiB                               num = num + 1
   405  535.180 MiB    0.000 MiB                               offs = pd.DataFrame(columns=df_list[fc].columns)
   406  535.180 MiB    0.000 MiB                               offs['MF'] = np.random.choice(['F','M'], arrivals)
   407  535.180 MiB    0.000 MiB                               offs['Farm'] = f
   408  535.180 MiB    0.000 MiB                               offs['Cage'] = np.random.choice(range(1,inpt.ncages[f-1]+1), arrivals)
   409  535.180 MiB    0.000 MiB                               offs['stage'] = np.repeat(1, arrivals)
   410  535.180 MiB    0.000 MiB                               offs['stage_age'] = np.repeat(0, arrivals)
   411  535.180 MiB    0.000 MiB                               if len(bv_lst)<arrivals:
   412                                                             randams = np.random.choice(dams,arrivals-len(bv_lst))
   413                                                             for i in randams:
   414                                                                 underlying = 0.5*df_list[fc].resistanceT1[i]\
   415                                                                    + 0.5*df_list[fc].mate_resistanceT1[i]+ \
   416                                                                    np.random.normal(0, farms_sigEMB[farm-1], 1)/np.sqrt(2)
   417                                                                 bv_lst.extend(underlying)  
   418  535.180 MiB    0.000 MiB                               ran_bvs = np.random.choice(len(bv_lst),arrivals,replace=False)
   419  535.180 MiB    0.000 MiB                               offs['resistanceT1'] = [bv_lst[i] for i in ran_bvs]  
   420  535.180 MiB    0.000 MiB                               for i in sorted(ran_bvs, reverse=True):
   421  535.180 MiB    0.000 MiB                                   del bv_lst[i]     
   422  535.180 MiB    0.000 MiB                               Earrival = [hrs_travel[i-1][farm-1] for i in offs.Farm]                            
   423  535.180 MiB    0.000 MiB                               offs['arrival'] = np.random.poisson(Earrival)
   424  535.180 MiB    0.000 MiB                               offs['avail'] = 0
   425  535.180 MiB    0.000 MiB                               offs['date'] = cur_date
   426  535.180 MiB    0.000 MiB                               offs['nmates'] = 0
   427  535.180 MiB    0.000 MiB                               offs_lst.append(offs)                        
   428  535.180 MiB    0.000 MiB                               del offs
   429  535.180 MiB    0.000 MiB                       offspring = pd.concat(offs_lst)
   430                                             
   431                                                 
   432                                                 #Update cage info------------------------------------------------------------------
   433                                                 #----------------------------------------------------------------------------------
   434  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L1toL2_inds),'stage'] = 2
   435  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L1toL2_inds),'stage_age'] = 0 
   436  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L3toL4_inds),'stage'] = 4
   437  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L3toL4_inds),'stage_age'] = 0
   438  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L4toL5_inds) & (df_list[fc].MF=='F'),'stage'] = 5
   439  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L4toL5_inds) & (df_list[fc].MF=='M'),'stage'] = 6
   440  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(L4toL5_inds),'stage_age'] = 0
   441                                                 
   442  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(inf_inds), 'stage'] = 3
   443  535.180 MiB    0.000 MiB                       df_list[fc].loc[df_list[fc].index.isin(inf_inds),'stage_age'] = 0
   444                                                 df_list[fc].loc[df_list[fc].index.isin(inf_inds),'Fish'] = \
   445  535.180 MiB    0.000 MiB                                 np.random.choice(all_fish['f'+str(farm)+'c'+str(cage)], len(inf_inds))             
   446                             
   447                                                           
   448                                                 #remove dead individuals
   449  535.180 MiB    0.000 MiB                       df_list[fc] = df_list[fc].drop(mort_inds)
   450  535.180 MiB    0.000 MiB                       df_list[fc] = df_list[fc].drop(df_list[fc].loc[df_list[fc].Fish.isin(dead_fish)].index)
   451                                                 
   452                                                                
   453                                                 #df_list[fc].to_csv(file_path + 'lice_df.csv', mode='a')
   454                                                 
   455  533.254 MiB   -1.926 MiB               if cur_date.day==1:
   456  433.121 MiB -100.133 MiB                   print(cur_date, femaleAL.mean(), femaleAL.std(), file=file1, flush=True)
   457  433.121 MiB    0.000 MiB                   femaleAL = np.array([],dtype=float)
   458                                                 
   459  533.254 MiB  100.133 MiB       file1.close()  
   460  533.254 MiB    0.000 MiB       file2.close()
   461  533.254 MiB    0.000 MiB       return farms_muEMB


